# Пока есть ещё символы для чтения:
# Читаем очередной символ.
# Если символ является числом или постфиксной функцией(например, ! — факториал), добавляем его к выходной строке.
# Если символ является префиксной функцией(например, sin — синус), помещаем его в стек.
# Если символ является открывающей скобкой, помещаем его в стек.
# Если символ является закрывающей скобкой:
# До тех пор, пока верхним элементом стека не станет открывающая скобка, выталкиваем элементы из стека в выходную строку. 
# При этом открывающая скобка удаляется из стека, но в выходную строку не добавляется. 
# Если стек закончился раньше, чем мы встретили открывающую скобку, это означает, что в выражении либо неверно поставлен разделитель, либо не согласованы скобки.
# Если существуют разные виды скобок, появление непарной скобки также свидетельствует об ошибке. 
# Если какие-то скобки одновременно являются функциями(например, [x] — целая часть), добавляем к выходной строке символ этой функции.
# Если символ является бинарной операцией о1, тогда:
# 1) пока на вершине стека префиксная функция…
# … ИЛИ операция на вершине стека приоритетнее или такого же уровня приоритета как o1
# … ИЛИ операция на вершине стека левоассоциативная с приоритетом как у o1
# … выталкиваем верхний элемент стека в выходную строку;
# 2) помещаем операцию o1 в стек.
# Когда входная строка закончилась, выталкиваем все символы из стека в выходную строку. В стеке должны были остаться только символы операций; 
# если это не так, значит в выражении не согласованы скобки.



expression = "1 + ( 5 - 1 ) * 2 / 4".split(" ")
stack_list = []
result_list = []

for el in expression:
    if el.isdigit():
        result_list.append(el)
    elif el == "(":
        stack_list.append(el)
    elif el == ")":
        while stack_list[-1] != "(":
            result_list.append(stack_list.pop())
        stack_list.pop()
    elif el == "*" or el =="/":
        while stack_list and stack_list[-1] in ["*", "/"]:
            result_list.append(stack_list.pop())
        stack_list.append(el)
    elif el == "+" or el == "-":
        while stack_list and stack_list[-1] in ["-", "+", "*", "/"]:
           result_list.append(stack_list.pop())
        stack_list.append(el)
while stack_list:
    result_list.append(stack_list.pop())
print(result_list)

temp = []
for i in result_list:
    if i.isdigit():
        temp.append(int(i))
    elif i in ["-", "+", "*", "/"]:
        b = int(temp.pop())
        a = int(temp.pop())
        if i == "+":
            temp.append(a+b)
        elif i == "-":
            temp.append(a-b)
        elif i == "*":
            temp.append(a*b)
        elif i == "/":
            temp.append(a/b)
print(temp)